/*
A KBase module: narrative_job_mock
*/

module narrative_job_mock {
    /* @range [0,1] */
    typedef int boolean;

    /*
        A time in the format YYYY-MM-DDThh:mm:ssZ, where Z is either the
        character Z (representing the UTC timezone) or the difference
        in time to UTC in the format +/-HHMM, eg:
            2012-12-17T23:24:06-0500 (EST time)
            2013-04-03T08:56:32+0000 (UTC time)
            2013-04-03T08:56:32Z (UTC time)
    */
    typedef string timestamp;

    /* A job id. */
    typedef string job_id;

    /* A workspace object reference of the form X/Y/Z, where
       X is the workspace name or id,
       Y is the object name or id,
       Z is the version, which is optional.
     */
    typedef string wsref;

    /* Error block of JSON RPC response */
    typedef structure {
        string name;
        int code;
        string message;
        string error;
    } JsonRpcError;

    /*
        time - the time the call was started;
        method - service defined in standard JSON RPC way, typically it's
            module name from spec-file followed by '.' and name of funcdef
            from spec-file corresponding to running method (e.g.
            'KBaseTrees.construct_species_tree' from trees service);
        job_id - job id if method is asynchronous (optional field).
    */
    typedef structure {
        timestamp time;
        string method;
        job_id job_id;
    } MethodCall;

    /*
        call_stack - upstream calls details including nested service calls and
            parent jobs where calls are listed in order from outer to inner.
    */
    typedef structure {
        list<MethodCall> call_stack;
        string run_id;
    } RpcContext;

    /*
        method - service defined in standard JSON RPC way, typically it's
            module name from spec-file followed by '.' and name of funcdef
            from spec-file corresponding to running method (e.g.
            'KBaseTrees.construct_species_tree' from trees service);
        params - the parameters of the method that performed this call;

        Optional parameters:
        service_ver - specific version of deployed service, last version is
            used if this parameter is not defined
        rpc_context - context of current method call including nested call
            history
        remote_url - run remote service call instead of local command line
            execution.
        source_ws_objects - denotes the workspace objects that will serve as a
            source of data when running the SDK method. These references will
            be added to the autogenerated provenance.
        app_id - the id of the Narrative application running this job (e.g.
            repo/name)
        mapping<string, string> meta - user defined metadata to associate with
            the job. This data is passed to the User and Job State (UJS)
            service.
        wsid - a workspace id to associate with the job. This is passed to the
            UJS service, which will share the job based on the permissions of
            the workspace rather than UJS ACLs.
    */
    typedef structure {
        string method;
        list<UnspecifiedObject> params;
        string service_ver;
        RpcContext rpc_context;
        string remote_url;
        list<wsref> source_ws_objects;
        string app_id;
        mapping<string, string> meta;
        int wsid;
    } RunJobParams;

    /*
        job_id - id of job running method
        finished - indicates whether job is done (including error/cancel cases) or not,
            if the value is true then either of 'returned_data' or 'detailed_error'
            should be defined;
        ujs_url - url of UserAndJobState service used by job service
        status - tuple returned by UserAndJobState.get_job_status method
        result - keeps exact copy of what original server method puts
            in result block of JSON RPC response;
        error - keeps exact copy of what original server method puts
            in error block of JSON RPC response;
        job_state - 'queued', 'in-progress', 'completed', or 'suspend';
        position - position of the job in execution waiting queue;
        creation_time, exec_start_time and finish_time - time moments of submission, execution
            start and finish events in milliseconds since Unix Epoch,
        canceled - whether the job is canceled or not.
        cancelled - Deprecated field, please use 'canceled' field instead.
    */
    typedef structure {
        string job_id;
        boolean finished;
        string ujs_url;
        UnspecifiedObject status;
        UnspecifiedObject result;
        JsonRpcError error;
        string job_state;
        int position;
        int creation_time;
        int exec_start_time;
        int finish_time;
        boolean cancelled;
        boolean canceled;
    } JobState;

    /*
        Check if a job is finished and get results/error
    */
    funcdef check_job(job_id job_id) returns (JobState job_state) authentication required;

    typedef structure {
        list<job_id> job_ids;
        boolean with_job_params;
    } CheckJobsParams;

    /*
        job_states - states of jobs,
        job_params - parameters of jobs,
        check_error - this map includes info about errors happening during job checking.
    */
    typedef structure {
        mapping<job_id, JobState> job_states;
        mapping<job_id, RunJobParams> job_params;
        mapping<job_id, JsonRpcError> check_error;
    } CheckJobsResults;

    funcdef check_jobs(CheckJobsParams params) returns (CheckJobsResults)
        authentication required;

    /*
        A 'typedef' allows you to provide a more specific name for
        a type.  Built-in primitive types include 'string', 'int',
        'float'.  Here we define a type named assembly_ref to indicate
        a string that should be set to a KBase ID reference to an
        Assembly data object.
    */
    typedef string assembly_ref;

    /*
        A 'typedef' can also be used to define compound or container
        objects, like lists, maps, and structures.  The standard KBase
        convention is to use structures, as shown here, to define the
        input and output of your function.  Here the input is a
        reference to the Assembly data object, a workspace to save
        output, and a length threshold for filtering.

        To define lists and maps, use a syntax similar to C++ templates
        to indicate the type contained in the list or map.  For example:

            list <string> list_of_strings;
            mapping <string, int> map_of_ints;
    */
    typedef structure {
        assembly_ref assembly_input_ref;
        string workspace_name;
        int min_length;
    } FilterContigsParams;


    /*
        Here is the definition of the output of the function.  The output
        can be used by other SDK modules which call your code, or the output
        visualizations in the Narrative.  'report_name' and 'report_ref' are
        special output fields- if defined, the Narrative can automatically
        render your Report.
    */
    typedef structure {
        string report_name;
        string report_ref;
        assembly_ref assembly_output;
        int n_initial_contigs;
        int n_contigs_removed;
        int n_contigs_remaining;
    } FilterContigsResults;

    /*
        The actual function is declared using 'funcdef' to specify the name
        and input/return arguments to the function.  For all typical KBase
        Apps that run in the Narrative, your function should have the
        'authentication required' modifier.
    */
    funcdef filter_contigs(FilterContigsParams params)
        returns (FilterContigsResults output) authentication required;
};
